<?php
namespace Modules\Property\Controllers;

use Modules\FrontendController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\Property\Models\Property;
use Modules\Location\Models\Location;
use Modules\Core\Models\Attributes;
use Modules\Booking\Models\Booking;
use Modules\Property\Models\PropertyTerm;
use Modules\Property\Models\PropertyTranslation;
use Modules\Property\Models\PropertyCategory;
use Illuminate\Support\Facades\DB;
use Modules\Vendor\Models\BcContactObject;
use Modules\Review\Models\Review;
use App\Mail\Askreviews;
use Carbon\Carbon;

use Illuminate\Support\Facades\Mail;
use App\Mail\NotifyMail;
use App\User;

class ManagePropertyController extends FrontendController
{
    protected $propertyClass;
    protected $propertyTranslationClass;
    protected $propertyTermClass;
    protected $attributesClass;
    protected $locationClass;
    protected $propertyCategoryClass;
    protected $bookingClass;

    public function __construct()
    {
        parent::__construct();
        $this->propertyClass = Property::class;
        $this->propertyTranslationClass = PropertyTranslation::class;
        $this->propertyTermClass = PropertyTerm::class;
        $this->attributesClass = Attributes::class;
        $this->locationClass = Location::class;
        $this->propertyCategoryClass = PropertyCategory::class;
        $this->bookingClass = Booking::class;
    }
    public function callAction($method, $parameters)
    {
        if(!Property::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }
	
	public function response($msg,$error=false, $datax=array()){
		
		$data = array();
		$data["status"] = $error ? "RC100" : "RC200";
		$data["message"] = $msg;
		$data["data"] = $datax;
		
		header('Content-Type: application/json');
		echo json_encode($data);
		exit;
	}
	
	
    public function manageProperty(Request $request)
    {
        
        $this->checkPermission('property_view');
        $user_id = Auth::id();
        $rows = $this->propertyClass::query()->select("bc_properties.*")->where("bc_properties.create_user", $user_id);

        if (!empty($search = $request->input("s"))) {
            $rows->where(function($query) use ($search) {
                $query->where('bc_properties.title', 'LIKE', '%' . $search . '%');
                $query->orWhere('bc_properties.content', 'LIKE', '%' . $search . '%');
            });

            if( setting_item('site_enable_multi_lang') && setting_item('site_locale') != app_get_locale() ){
                $rows->leftJoin('bc_property_translations', function ($join) use ($search) {
                    $join->on('bc_properties.id', '=', 'bc_property_translations.origin_id');
                });
                $rows->orWhere(function($query) use ($search) {
                    $query->where('bc_property_translations.title', 'LIKE', '%' . $search . '%');
                    $query->orWhere('bc_property_translations.content', 'LIKE', '%' . $search . '%');
                });
            }
        }

        if(!empty($status = $request->input("status"))){
            $rows->where('status', $status);
        }

        if(!empty($category_id = $request->input("category_id")) && $category_id > 0){
            $rows->join('bc_property_category_relationships as pcr', 'pcr.property_id', "bc_properties.id")
                 ->where('pcr.category_id', $category_id);
        }

        if (!empty($filterSelect = $request->input("select_filter"))) {
            if ($filterSelect == 'recent') {
                $rows->orderBy('bc_properties.id','desc');
            }

            if ($filterSelect == 'old') {
                $rows->orderBy('bc_properties.id','asc');
            }

            if ($filterSelect == 'featured') {
                $rows->where('bc_properties.is_featured','=', 1);
            }
        } else {
            $rows->orderBy('bc_properties.id','desc');
        }

        $data = [
            'rows' => $rows->with('categories')->paginate(5),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('All'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Manage Properties"),
        ];
        return view('Property::frontend.manageProperty.index', $data);
    }


    public function createProperty(Request $request)
    {
        // echo "string"; exit();
        $this->checkPermission('property_create');
        $row = new $this->propertyClass();
        $data = [
            'row'           => $row,
            'translation' => new $this->propertyTranslationClass(),
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Create'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Create Properties"),
        ];
        return view('Property::frontend.manageProperty.detail', $data);
    }

 
    public function store( Request $request, $id ){
            // dd($request->all());
			
        if($id>0){
            $this->checkPermission('property_update');
            $row = $this->propertyClass::find($id);
            if (empty($row)) {
                return redirect(route('property.vendor.index'));
            }

            if($row->create_user != Auth::id() and !$this->hasPermission('property_manage_others'))
            {
                return redirect(route('property.vendor.index'));
            }
        }else{
            $this->checkPermission('property_create');
            $row = new $this->propertyClass();
            $row->status = "publish";
            if(setting_item("property_vendor_create_service_must_approved_by_admin", 0)){
                $row->status = "pending";
            }
        }
        $dataKeys = [
            'title',
            'content',
            'license_number',
            'price',
            'is_instant',
            'video',
            'faqs',
            'image_id',
            'banner_image_id',
            'gallery',
            'bed',
            'bathroom',
            'square',
            'location_id',
            'address',
            'address_2',
            'map_lat',
            'map_lng',
            'map_zoom',
            'default_state',
            'price',
            'sale_price',
            'max_guests',
            'enable_extra_price',
            'extra_price',
            'is_featured',
            'default_state',
            'deposit',
            'pool_size',
            'additional_zoom',
            'remodal_year',
            'amenities',
            'equipment',
            'property_type',
            'is_sold',
            'enable_open_hours',
            'open_hours',
            'property_logo',
            'price_range',
            'banner_images',
            'email',
            'phone',
            'website',
            'price_from',
            'socials',
            'facebook',
            'instagram',
            'linkedin',
            'twitter',
            'verified',
            'hires'
            ];

        // dd('ok');
        //     if($request->file('certifications'))
        // {
        //     //delete old certifications
        //         DB::table('bc_docs')
        //         ->where('property_id',$id)
        //         ->where('type','certifications')
        //         ->delete();

        //     $file= $request->file('certifications');
        //     $filename= date('YmdHi').$file->getClientOriginalName();
        //     $file->move(public_path('./certifications'), $filename);
        //     $certifications_name = $filename;
        //     $path = 'public/certifications/'.$filename;
        //     DB::table('bc_docs')->insert([
        //         'name'=>$certifications_name, 
        //         'property_id'=>$id,
        //         'path'=>$path,
        //         'type'=>'certifications',
        //     ]);
        // }


        /*if($request->hasfile('certifications'))
         {
                //delete old certifications
                DB::table('bc_docs')
                ->where('property_id',$id)
                ->delete();
            foreach($request->file('certifications') as $key => $file)
            {

                $filename = $file->getClientOriginalName();
                $file->move(public_path('./certifications'), $filename);
                $path = 'public/certifications/'.$filename;
                DB::table('bc_docs')->insert([
                    'name'=>$filename, 
                    'property_id'=>$id,
                    'path'=>$path
                ]);
            }
         }*/



        if($this->hasPermission('property_manage_others')){
            $dataKeys[] = 'create_user';
        }
        $row->fillByAttr($dataKeys,$request->input());

        if($request->input('slug')){
            $row->slug = $request->input('slug');
        }


        $res = $row->saveOriginOrTranslation($request->input('lang'),true);

        $row->categories()->sync($request->input('categories') ?? []);

		User::where("property_created", $id)->update([
			"name"=>$request->title,
			"first_name"=>$request->title
		]);
		
        if ($res) {
            if(!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }

            if($id > 0 ){
                return redirect(route('user.profile.edit',['id'=>$row->id]))->with('success', __('Profile updated successfully !') );
                // return back()->with('success',  __('Details updated successfully !') );
            }else{
                return redirect(route('user.profile.edit',['id'=>$row->id]))->with('success', __('Profile updated successfully !') );
            }
        }
    }

    public function saveTerms($row, $request)
    {
        if (empty($request->input('terms'))) {
            $this->propertyTermClass::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->propertyTermClass::firstOrCreate([
                    'term_id' => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->propertyTermClass::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }

    public function editProperty(Request $request, $id)
    {
         $user = Auth::user();
         if(!$user->hasVerifiedEmail())
        {
            return redirect('email/verify');
        }
        
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find($id);
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));

        $certifications_award = DB::table('bc_docs')->where('property_id',$row->id)->get();
        $data = [
            'certifications_award' => $certifications_award,
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Edit Properties"),
        ];
 
        return view('Property::frontend.manageProperty.detail', $data);
    }


    public function deleteProperty($id)
    {
        $this->checkPermission('property_delete');
        $user_id = Auth::id();
        $query = $this->propertyClass::where("create_user", $user_id)->where("id", $id)->first();
        if(!empty($query)){
            $query->delete();
        }
        return redirect(route('property.vendor.index'))->with('success', __('Delete property success!'));
    }

    public function bulkEditProperty($id , Request $request){
        $this->checkPermission('property_update');
        $action = $request->input('action');
        $user_id = Auth::id();
        $query = $this->propertyClass::where("create_user", $user_id)->where("id", $id)->first();
        if (empty($id)) {
            return redirect()->back()->with('error', __('No item!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        if(empty($query)){
            return redirect()->back()->with('error', __('Not Found'));
        }
        switch ($action){
            case "make-hide":
                $query->status = "draft";
                break;
            case "make-publish":
                $query->status = "publish";
                break;
        }
        $query->save();
        return redirect()->back()->with('success', __('Update success!'));
    }

    public function bookingReport(Request $request)
    {
        $data = [
            'bookings' => $this->bookingClass::getBookingHistory($request->input('status'), false , Auth::id() , 'property'),
            'statues'  => config('booking.statuses'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Property'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name' => __('Booking Report'),
                    'class'  => 'active'
                ]
            ],
            'page_title'         => __("Booking Report"),
        ];
        return view('Property::frontend.manageProperty.bookingReport', $data);
    }

    public function bookingReportBulkEdit($booking_id , Request $request){
        $status = $request->input('status');
        if (!empty(setting_item("property_allow_vendor_can_change_their_booking_status")) and !empty($status) and !empty($booking_id)) {
            $query = $this->bookingClass::where("id", $booking_id);
            $query->where("vendor_id", Auth::id());
            $item = $query->first();
            if(!empty($item)){
                $item->status = $status;
                $item->save();
                $item->sendStatusUpdatedEmails();
                return redirect()->back()->with('success', __('Update success'));
            }
            return redirect()->back()->with('error', __('Booking not found!'));
        }
        return redirect()->back()->with('error', __('Update fail!'));
    }

	public function cloneProperty(Request $request,$id){
		$this->checkPermission('property_update');
		$user_id = Auth::id();
		$row = $this->propertyClass::where("create_user", $user_id);
		$row = $row->find($id);
		if (empty($row)) {
			return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
		}
		try{
			$clone = $row->replicate();
			$clone->status  = 'draft';
			$clone->push();
			if(!empty($row->terms)){
				foreach ($row->terms as $term){
					$e= $term->replicate();
					if($e->push()){
						$clone->terms()->save($e);

					}
				}
			}
			if(!empty($row->meta)){
				$e= $row->meta->replicate();
				if($e->push()){
					$clone->meta()->save($e);

				}
			}
			if(!empty($row->translations)){
				foreach ($row->translations as $translation){
					$e = $translation->replicate();
					$e->origin_id = $clone->id;
					if($e->push()){
						$clone->translations()->save($e);
					}
				}
			}

			return redirect()->back()->with('success',__('Property clone was successful'));
		}catch (\Exception $exception){
			$clone->delete();
			return redirect()->back()->with('warning',__($exception->getMessage()));
		}
	}

    public function showContact(Request $request) {
        $rows = BcContactObject::where('object_model', '=', 'property')->where('vendor_id',Auth::id())->paginate(20);
        if (count($rows) > 0) {
            foreach($rows as $row) {
                $row->nameProperty = $this->propertyClass::where('id', $row->object_id)->first()->title;
                $row->nameVendor = DB::table('users')->select(DB::raw('CONCAT(first_name, " ", last_name) AS name'))->where('id', $row->vendor_id)->first()->name;
            }
        }
        $data = [
            'rows'        => $rows,
            'breadcrumbs' => [
                [
                    'name' => __('Manage Property'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Contact'),
                    'class' => 'active'
                ],
            ],
            'page_title'  => __("Contact property"),
        ];
        return view('Property::frontend.manageProperty.contact', $data);
    }






//ch messages
    public function chmsg(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];

        
        $message_data = DB::table('ch_messages')
                    ->where('to_id', $user_id)
                    ->orderBy('ch_messages.id','desc')
                    // ->join('users', 'users.id' , '=', 'ch_messages.from_id')
                    ->get();


        return view('Property::frontend.manageProperty.message', get_defined_vars());
    }
 


//send ch messages
    public function send_chmsg(Request $request)
    {
		
		if(!
			(
				$request->has("to_id")
				&& $request->has("c_slug")
				&& $request->has("name")
				&& $request->has("email")
				&& $request->has("phone")
				&& $request->has("message")
				&& $request->has("from_id")
			)
		){
			//return redirect()->back()->with('error', __('Message not sent, Please try again...') );
			return $this->response("Message not sent, Please try again...",true);
		}
		
		$user = DB::table('users')->where("id", $request->to_id)->first();
		
		if(!$user){
			return $this->response("Message not sent, Please try again...",true);
			//return redirect()->back()->with('error', __('Message not sent, Please try again...') );
		}
		
		if ($request->from_id != null) {
            $from_id = $request->from_id;
        }else{
            $from_id = 0;
        }
        //send messages to ch
        $ch_messages_data = array(
            'sms_name'=>$request->name,
            'sms_email'=>$request->email,
            'sms_phone'=>$request->phone,
            'from_id'=> $from_id,
            'to_id'=>$request->to_id,
            'body'=>$request->message,
            'c_slug'=>$request->c_slug,
            'created_at'=> date("Y-m-d h:i:sa")
        );

        // dd($ch_messages_data);

        DB::table('ch_messages')->insert($ch_messages_data);
		
		$to_name = $user->name;
		$to_email = $user->email;
		
		$contents = "";
		$contents .= "<strong>Name: </strong>" . $request->name . '<br />';
		$contents .= "<strong>Phone: </strong>" . $request->phone . '<br />';
		$contents .= "<strong>Email Address: </strong>" . $request->email . '<br />';
		$contents .= "<strong>Message: </strong>" . $request->message;
		
		$data = array("content"=> $contents, "from" => $request->name, "phone" => $request->phone);
		
		Mail::send('emails/general', $data, function($message) use ($to_email,$to_name) {
			$message->to($to_email, $to_name)->subject("New Message Received");
			$message->from("no-reply@contrafinder.com","Contrafinder");
		});
		
		//return redirect()->back()->with('success', __('Message sent successfully!') );
		return $this->response("Message sent successfully!");
		
    }

//ch analytics
    public function analytics(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];
        

        //analytics added function
        $user_ip = \Request::ip();
        $currentMonth = date('m');

        $day = date('w');
        $week_start = date('m-d-Y', strtotime('-'.$day.' days'));
        $week_end = date('m-d-Y', strtotime('+'.(6-$day).' days'));

        if (count($request->all())  > 0) {
            $total_analytics = DB::table('analytics')->where('ch_id',$row->id)->whereBetween('date', 
                            [$request->from, $request->to]
                        )->count();
        }else{
            $total_analytics = DB::table('analytics')->where('ch_id',$row->id)->count(); 
        }
		
        $currentday_analytics = DB::table('analytics')->where('ch_id',$row->id)->whereDate('date', date("Y-m-d"))->count();
		
        $currentWeek_analytics = DB::table('analytics')->where('ch_id',$row->id)->whereBetween('date',
                            [Carbon::now()->startOfWeek()->format('Y-m-d'), Carbon::now()->endOfWeek()->format('Y-m-d')]
                        )->count();
        $currentMonth_analytics = DB::table('analytics')->where('ch_id',$row->id)->whereRaw('MONTH(date) = ?',[$currentMonth])->count();
		
		return view('Property::frontend.manageProperty.analytics', get_defined_vars());
    }

    //ch reviews
    public function reviews(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));

        $review_list = Review::where('object_id', $row->id)->where('object_model', 'property')->where("status", "approved")->orderBy("id", "desc")->with('author')->paginate(setting_item('new_review_number_per_page', 5));

        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'review_list' => $review_list,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];
        return view('Property::frontend.manageProperty.reviews', get_defined_vars());
    }

    //ask for reviews
    public function askreviews(Request $request)
    {
		$user = auth()->user();
		$property = DB::table('bc_properties')->where('id',$user->property_created)->first();
		
		$emails = $request->emails;
		$description = $request->message;
		
		if(empty($emails)){
			return redirect('user/profile/reviews')->with('error', __('Please enter at least one email.'));
		}
        
		$emails_data = explode(',', $emails);
		
		if($emails_data){

            foreach ($emails_data as $key => $value) {
                
                Mail::to(trim($value))->send(new Askreviews($user,$property,$description));
 
			}
		}
		
		/*if (Mail::failures() == 0) {
			return redirect('user/profile/reviews')->with('error', __('Sorry! Please try again latter'));
		}else{
			
		}*/
		
		return redirect('user/profile/reviews')->with('success', __('Great! Successfully send in your mail'));
		/*return redirect('user/profile/reviews')->with('error', __('Sorry! Please try again latter'));*/
    }

    //ch project
    public function project(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];
        

        //bc_projects
        $bc_projects = DB::table('bc_projects')->where('property_id',get_bc_properties())->get();


        return view('Property::frontend.manageProperty.project', get_defined_vars());
    }

    //ch addproject
    public function addproject(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];
        
 
        //bc_projects
        $bc_projects = DB::table('bc_projects')->where('property_id',get_bc_properties())->get();


        return view('Property::frontend.manageProperty.add-project', get_defined_vars());
    }


    //ch user.profile.submit_projects
    public function added_projects(Request $request)
    {
        //bc_projects
        $project_data = array(
            'property_id'=>get_bc_properties(),
            'project_name'=>$request->project_name,
            'project_cost'=>$request->cost,
            'project_location'=>$request->address,
            'completion_year'=>$request->completion_year,
            'project_photos'=>$request->project_photos,
            'project_description'=>$request->project_description,
            'category'=>$request->category,
            'unique_id'=>$request->unique_id,
            'type'=>$request->type
        );
        DB::table('bc_projects')->insert($project_data);

        return redirect('user/profile/projects')->with('success', __('Projects added successfully!') );
	}


    //edit
    public function edit_projects(Request $request)
    {
        // dd($request->id);

        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        
		if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        
		$translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Message"),
        ];

        $row_ = DB::table('bc_projects')->where('id', $request->id)->first();
        return view('Property::frontend.manageProperty.edit-project', get_defined_vars());
    }

    //update
    public function update_projects(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];

        $project_data = array(
            'property_id'=>get_bc_properties(),
            'project_name'=>$request->project_name,
            'category'=>$request->category,
            'type'=>$request->type,
            'project_cost'=>$request->cost,
            'project_location'=>$request->address,
            'completion_year'=>$request->completion_year,
            'project_photos'=>$request->banner_images,
            'project_description'=>$request->project_description
        );

        $update = DB::table('bc_projects')->where('id', $request->project_id)->update($project_data);
        
		if ($update) {
            return redirect('user/profile/projects')->with('success', __('Projects updated successfully!') );
        }
        return redirect('user/profile/projects')->with('error', __('Something wrong!') );
    }

        //delete
    public function delete_projects_(Request $request)
    {
        $this->checkPermission('property_update');
        $user_id = Auth::id();
        $row = $this->propertyClass::where("create_user", $user_id);
        $row = $row->find(get_bc_properties());
        if (empty($row)) {
            return redirect(route('property.vendor.index'))->with('warning', __('Property not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'property_category'    => $this->propertyCategoryClass::where('status', 'publish')->get()->toTree(),
            'property_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'property')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Properties'),
                    'url'  => route('property.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'page_title'         => __("Message"),
        ];
        $delete = DB::table('bc_projects')->where('id', $request->id)->delete();
        if ($delete) {
            return redirect('user/profile/projects')->with('success', __('Projects deleted successfully!') );
        }
        
        return redirect('user/profile/projects')->with('error', __('Something wrong!') );
    }

}
